#!/usr/bin/env python

"""
GoPiGo3 for the Raspberry Pi: an open source robotics platform for the Raspberry Pi.
Copyright (C) 2017  Dexter Industries

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/gpl-3.0.txt>.
"""

from easygopigo3 import EasyGoPiGo3
from gopigo3 import FirmwareVersionError
import sys
import signal
from time import sleep

DEBUG = False # if set to True, any exception that's encountered is debugged
MAX_DISTANCE = 2000 # measured in mm
MIN_DISTANCE = 150 # measured in mm
NO_OBSTACLE = 3000
LIGHTS = 300
TURN = 200
front = 3000
right = 200
ERROR = 0 # the error that's returned when the DistanceSensor is not found
MAX_SPEED = 300 # max speed of the GoPiGo3
MIN_SPEED = 100 # min speed of the GoPiGo3
walls_seen = 0 #count the walls seen

# variable for triggering the closing procedure of the script
# used for stopping the while loop that's in the Main() function
robot_operating = True

# handles the CTRL-C signal sent from the keyboard
# required for gracefull exits of the script
def signal_handler(signal, frame):
    global robot_operating
    print("CTRL-C combination pressed")
    robot_operating = False

# function for debugging
def debug(string):
    if DEBUG is True:
        print("Debug: " + str(string))

def Main():

    print("   _____       _____ _  _____         ____  ")
    print("  / ____|     |  __ (_)/ ____|       |___ \ ")
    print(" | |  __  ___ | |__) || |  __  ___     __) |")
    print(" | | |_ |/ _ \|  ___/ | | |_ |/ _ \   |__ < ")
    print(" | |__| | (_) | |   | | |__| | (_) |  ___) |")
    print("  \_____|\___/|_|   |_|\_____|\___/  |____/ ")
    print("                                            ")

    # initializing an EasyGoPiGo3 object and a DistanceSensor object
    # used for interfacing with the GoPiGo3 and with the distance sensor
    try:
        gopigo3 = EasyGoPiGo3()
        distance_sensor = gopigo3.init_distance_sensor()

    except IOError as msg:
        print("GoPiGo3 robot not detected or DistanceSensor not installed.")
        debug(msg)
        sys.exit(1)

    except FirmwareVersionError as msg:
        print("GoPiGo3 firmware needs to updated.")
        debug(msg)
        sys.exit(1)

    except Exception as msg:
        print("Error occurred. Set debug = True to see more.")
        debug(msg)
        sys.exit(1)

    if DEBUG is True:
        distance_sensor.enableDebug()

    # variable that says whether the GoPiGo3 moves or is stationary
    # used during the runtime
    gopigo3_stationary = True

    robot_operating = True
    walls_seen = 0
    my_servo = gopigo3.init_servo("SERVO1")  #initialize the servo
    my_distance_sensor = gopigo3.init_distance_sensor( )  #initialize the sensor

    # while the script is running

    while robot_operating:

        #take servo readings to understand the maze around you!
        my_servo.rotate_servo(0)  #turn servo straight ahead
        sleep(0.5)
        front_reading = my_distance_sensor.read_mm()  #take a reading and store it
        print(front_reading)
        sleep(0.5)

        my_servo.rotate_servo(90)  #turn servo to the right
        sleep(0.5)        
        right_reading = my_distance_sensor.read_mm()  #take a reading and store it
        sleep(0.5)        
        print(right_reading)
        

        if front_reading == ERROR:
            print("Cannot reach DistanceSensor. Stopping the process.")
            robot_operating = False
        
        #use servo readings to make a decision about what to do!
        
        if front_reading < 300:
            gopigo3.turn_degrees(90)
            print("WALL!")
        
        if front_reading > 700:
            gopigo3.forward()
            print("CHARGEEE!")
        
        if front_reading < 300:
            gopigo3.stop()
            
        if right_reading < 500:
            my_servo.rotate_servo(90)  
            sleep(0.5)        
            right_reading = my_distance_sensor.read_mm()
            sleep(0.5)        
            print(right_reading)
        #elif situation3:
           #do this!

        else:
            gopigo3.set_speed(300)
            gopigo3.forward()
            
        sleep(0.08) #wait for 0.08 seconds before starting the loop over!

            # and last, print some stats


if __name__ == "__main__":
    signal.signal(signal.SIGINT, signal_handler)
    Main()
    # signal handler
    # handles the CTRL-C combination of keys
